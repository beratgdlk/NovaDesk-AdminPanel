import prisma from '@onlyjs/db';
import type { ConversationUncheckedUpdateManyInput } from '@onlyjs/db/client/models';
import { NotFoundException } from '#utils/http-errors.ts';
import type { ConversationListItem } from './types';

export abstract class ChatRepository {
  /**
   * Yeni konu≈üma olu≈üturur
   */
  static async createConversation(
    conversationId: string,
    sessionToken: string,
    participantId: string | null,
    title: string,
    lastMessage: string,
  ): Promise<void> {
    // Session token'dan ger√ßek session record'ƒ±nƒ± bul (agent bilgileri ile birlikte)
    const session = await prisma.conversationParticipantSession.findUnique({
      where: {
        token: sessionToken,
        deletedAt: null, // Soft delete'leri hari√ß tut
      },
      select: {
        id: true,
        agentId: true,
        agentUuid: true,
      },
    });

    if (!session) {
      throw new NotFoundException('Session not found');
    }

    await prisma.conversation.create({
      data: {
        conversationId,
        participantSessionId: session.id, // token yerine id kullan
        conversationParticipantId: participantId,
        title,
        lastMessage,
        agentId: session.agentId,
        agentUuid: session.agentUuid,
      },
    });
  }

  /**
   * Konu≈ümayƒ± g√ºnceller
   */
  static async updateConversation(
    conversationId: string,
    sessionToken: string,
    lastMessage: string,
    participantId?: string | null,
  ): Promise<void> {
    // Session token'dan ger√ßek session record'ƒ±nƒ± bul
    const session = await prisma.conversationParticipantSession.findUnique({
      where: {
        token: sessionToken,
        deletedAt: null, // Soft delete'leri hari√ß tut
      },
    });

    if (!session) {
      throw new Error('Session not found');
    }

    // √ñnce mevcut conversation'ƒ± kontrol et
    const existingConversation = await prisma.conversation.findFirst({
      where: {
        conversationId,
        participantSessionId: session.id,
        deletedAt: null,
      },
    });

    const updateData: ConversationUncheckedUpdateManyInput = {
      lastMessage,
      updatedAt: new Date(),
    };

    // Eƒüer participant ID verilmi≈üse ve mevcut conversation'da participant ID yoksa g√ºncelle
    // Ama mevcut participant ID'yi null ile override etme
    if (participantId !== undefined && participantId !== null) {
      updateData.conversationParticipantId = participantId;
    } else if (participantId === null && existingConversation?.conversationParticipantId) {
      // Participant ID null ge√ßilmi≈ü ama conversation'da zaten participant ID var
      // Bu durumda participant ID'yi deƒüi≈ütirme (mevcut deƒüeri koru)
      console.log(
        `üîí Mevcut conversation participant ID korunuyor: ${existingConversation.conversationParticipantId}`,
      );
    }

    await prisma.conversation.updateMany({
      where: {
        conversationId,
        participantSessionId: session.id, // token yerine id kullan
        deletedAt: null,
      },
      data: updateData,
    });
  }

  /**
   * Konu≈ümaya eri≈üim kontrol√º
   */
  static async hasConversationAccess(
    conversationId: string,
    sessionToken: string,
    userId?: string,
  ): Promise<boolean> {
    console.log(
      `üîç Checking conversation access for: ${conversationId}, sessionToken: ${sessionToken}, userId: ${userId}`,
    );

    // Session token'dan ger√ßek session record'ƒ±nƒ± bul
    const session = await prisma.conversationParticipantSession.findUnique({
      where: {
        token: sessionToken,
        deletedAt: null, // Soft delete'leri hari√ß tut
      },
    });

    if (!session) {
      console.log(`‚ùå Session not found for token: ${sessionToken}`);
      return false;
    }

    console.log(`‚úÖ Session found: ${session.id}`);

    // √ñnce session'a g√∂re kontrol et
    const sessionConversation = await prisma.conversation.findFirst({
      where: {
        conversationId,
        participantSessionId: session.id, // token yerine id kullan
        deletedAt: null,
      },
    });

    console.log(`üîç Session conversation found:`, !!sessionConversation);

    if (sessionConversation) {
      return true;
    }

    // Kullanƒ±cƒ± giri≈ü yapmƒ±≈üsa participant'a g√∂re kontrol et
    if (userId) {
      const participant = await prisma.conversationParticipant.findFirst({
        where: { userId },
      });

      console.log(`üîç Participant found:`, !!participant);

      if (participant) {
        const participantConversation = await prisma.conversation.findFirst({
          where: {
            conversationId,
            conversationParticipantId: participant.id,
            deletedAt: null,
          },
        });

        console.log(`üîç Participant conversation found:`, !!participantConversation);

        return !!participantConversation;
      }
    }

    console.log(`‚ùå No access found for conversation: ${conversationId}`);
    return false;
  }

  /**
   * Konu≈üma listesini getirir
   */
  static async getConversationList(
    sessionToken: string,
    userId?: string,
  ): Promise<ConversationListItem[]> {
    // Session token'dan ger√ßek session record'ƒ±nƒ± bul
    const session = await prisma.conversationParticipantSession.findUnique({
      where: {
        token: sessionToken,
        deletedAt: null, // Soft delete'leri hari√ß tut
      },
    });

    if (!session) {
      return [];
    }

    // Kullanƒ±cƒ± giri≈ü yapmƒ±≈üsa participant ID'sini bul
    let participantId: string | undefined;
    if (userId) {
      const participant = await prisma.conversationParticipant.findFirst({
        where: { userId },
      });
      participantId = participant?.id;
    }

    const conversations = await prisma.conversation.findMany({
      where: {
        OR: [
          { participantSessionId: session.id }, // token yerine id kullan
          ...(participantId ? [{ conversationParticipantId: participantId }] : []),
        ],
        deletedAt: null,
      },
      orderBy: {
        updatedAt: 'desc',
      },
    });

    return conversations.map((conv) => ({
      conversationId: conv.conversationId,
      title: conv.title || 'Yeni Konu≈üma',
      lastMessage: conv.lastMessage || '',
      createdAt: conv.createdAt.toISOString(),
      updatedAt: conv.updatedAt.toISOString(),
    }));
  }

  /**
   * Conversation participant olu≈üturur veya bulur
   */
  static async findOrCreateParticipant(
    userId: string, 
    fullName: string,
    agentId: number,
    agentUuid: string
  ): Promise<string> {
    console.log(`üîç Looking for participant with userId: ${userId} for agent: ${agentUuid}`);

    let participant = await prisma.conversationParticipant.findFirst({
      where: { 
        userId,
        agentId
      },
    });

    if (!participant) {
      console.log(`‚ûï Creating new participant: ${fullName} (userId: ${userId}, agentId: ${agentId})`);
      participant = await prisma.conversationParticipant.create({
        data: {
          userId,
          fullName,
          agentId,
          agentUuid,
        },
      });
      console.log(`‚úÖ Created participant with ID: ${participant.id}`);
    } else {
      console.log(`‚úÖ Found existing participant with ID: ${participant.id}`);
    }

    return participant.id;
  }

  /**
   * Session'daki konu≈ümalarƒ± participant'a migrate eder
   */
  static async migrateSessionConversations(
    sessionToken: string,
    participantId: string,
  ): Promise<void> {
    console.log(
      `üîÑ Starting migration for session: ${sessionToken}, participant: ${participantId}`,
    );

    // Session token'dan ger√ßek session record'ƒ±nƒ± bul
    const session = await prisma.conversationParticipantSession.findUnique({
      where: {
        token: sessionToken,
        deletedAt: null, // Soft delete'leri hari√ß tut
      },
    });

    if (!session) {
      console.log(`‚ùå Session not found for token: ${sessionToken}, skipping migration`);
      // Session bulunamadƒ±ƒüƒ±nda hata atmak yerine graceful handling yap
      // Session expire olmu≈ü olabilir ama conversation'lar hala mevcut olabilir
      return;
    }

    console.log(`‚úÖ Session found: ${session.id}`);

    // √ñnce migrate edilecek conversation'larƒ± bul
    const conversationsToMigrate = await prisma.conversation.findMany({
      where: {
        participantSessionId: session.id,
        conversationParticipantId: null,
        deletedAt: null,
      },
    });

    console.log(
      `üìã Found ${conversationsToMigrate.length} conversations to migrate:`,
      conversationsToMigrate.map((c) => c.conversationId),
    );

    if (conversationsToMigrate.length === 0) {
      console.log(`‚ÑπÔ∏è No conversations to migrate for session: ${sessionToken}`);
      return;
    }

    // Migration i≈ülemini ger√ßekle≈ütir
    const result = await prisma.conversation.updateMany({
      where: {
        participantSessionId: session.id,
        conversationParticipantId: null,
        deletedAt: null,
      },
      data: {
        conversationParticipantId: participantId,
      },
    });

    console.log(`‚úÖ Migration completed. Updated ${result.count} conversations.`);
  }

  /**
   * Konu≈üma metadata'sƒ±nƒ± database'den direkt √ßeker
   */
  static async getConversationMetadata(
    conversationId: string,
  ): Promise<{
    conversationId: string;
    title: string | null;
    createdAt: Date;
    updatedAt: Date;
  } | null> {
    const conversation = await prisma.conversation.findFirst({
      where: {
        conversationId,
        deletedAt: null,
      },
      select: {
        conversationId: true,
        title: true,
        createdAt: true,
        updatedAt: true,
      },
    });

    return conversation;
  }
}
