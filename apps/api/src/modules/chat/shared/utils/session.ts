import type { Agent } from '@onlyjs/db/client';
import { AuthService } from '../../auth/service';

/**
 * Session geÃ§erli deÄŸilse yeni session oluÅŸturur ve session ID'yi dÃ¶ner
 * Streaming sÄ±rasÄ±nda session recovery iÃ§in kullanÄ±lÄ±r
 */
export async function handleSessionRecovery(
  sessionId: string,
  agent: Pick<Agent, 'id' | 'uuid'>,
): Promise<{
  isRecovered: boolean;
  sessionId: string;
  message?: string;
}> {
  try {
    // Mevcut session'Ä± kontrol et
    const session = await AuthService.getSession(sessionId);

    if (session) {
      // Session geÃ§erli
      return {
        isRecovered: false,
        sessionId: sessionId,
      };
    }

    // Session not found - yeni session oluÅŸtur
    console.log(`ğŸ”„ Session recovery: Creating new session for invalid sessionId: ${sessionId}`);
    const newSessionId = await AuthService.createSession(agent);

    return {
      isRecovered: true,
      sessionId: newSessionId,
      message: `Session geÃ§ersiz olduÄŸu iÃ§in yeni session oluÅŸturuldu`,
    };
  } catch (error) {
    console.error('Session recovery error:', error);

    // Hata durumunda da yeni session oluÅŸtur
    const newSessionId = await AuthService.createSession(agent);

    return {
      isRecovered: true,
      sessionId: newSessionId,
      message: `Session kontrol hatasÄ± nedeniyle yeni session oluÅŸturuldu`,
    };
  }
}
